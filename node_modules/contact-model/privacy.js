import crypto from 'crypto'

class Privacy {
  #algo = 'AES-192-CBC'
  #encryptionKey = 'asdf-asdf-asdf-asdf-asdf' // string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> | <KeyObject> | <CryptoKey>

  /**
   * @param data {any}
   * @param [options] {object}
   * @param [options.iv] {string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> | <null>}
   */
  encrypt (data, options = {}) {
    const iv = options.iv || crypto.randomBytes(16)
    const cipher = crypto.createCipheriv(this.#algo, this.#encryptionKey, iv)
    return Buffer.concat([iv, cipher.update(Buffer.from(data)), cipher.final()])
  }

  decrypt (data) {
    const iv = data.subarray(0, 16)
    const cipher = data.subarray(16)
    const decipher = crypto.createDecipheriv(this.#algo, this.#encryptionKey, iv)
    const decrypted = Buffer.concat([decipher.update(cipher), decipher.final()])
    return decrypted.toString()
  }
}

export default Privacy

// const encrypter = new Privacy()

// const encrypted = encrypter.encrypt(process.argv[2])
// const decrypted = encrypter.decrypt(encrypted)
// console.log(decrypted)

// const iv = crypto.randomBytes(16)
// {
//   const encrypted = encrypter.encrypt(process.argv[2], { iv })
//   const decrypted = encrypter.decrypt(encrypted)
//   console.log(encrypted, decrypted)
// }

/*
https://stackoverflow.com/questions/33586060/error-when-decrypt-input-data-longer-than-15-chars-with-aes256-and-node-js
*/
